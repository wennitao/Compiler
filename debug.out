Ignoring directive: .type	__init,@function
Ignoring directive: .type	qsrt,@function
Ignoring directive: .type	main,@function
Ignoring directive: .type	fuckLLVM_a,@object
Ignoring directive: .size	fuckLLVM_a, 8
Ignoring directive: .type	fuckLLVM_n,@object
Ignoring directive: .size	fuckLLVM_n, 8
Ignoring directive: .type	fuckLLVM_.str.0,@object
Ignoring directive: .size	fuckLLVM_.str.0, 2
Ignoring directive: .type	fuckLLVM_.str.1,@object
Ignoring directive: .size	fuckLLVM_.str.1, 3
Ignoring directive: .file	"builtin.c"
Ignoring directive: .type	print, @function
Ignoring directive: .size	print, .-print
Ignoring directive: .type	println, @function
Ignoring directive: .size	println, .-println
Ignoring directive: .type	printInt, @function
Ignoring directive: .size	printInt, .-printInt
Ignoring directive: .type	printlnInt, @function
Ignoring directive: .size	printlnInt, .-printlnInt
Ignoring directive: .type	getString, @function
Ignoring directive: .size	getString, .-getString
Ignoring directive: .type	getInt, @function
Ignoring directive: .size	getInt, .-getInt
Ignoring directive: .type	toString, @function
Ignoring directive: .size	toString, .-toString
Ignoring directive: .type	length, @function
Ignoring directive: .size	length, .-length
Ignoring directive: .type	substring, @function
Ignoring directive: .size	substring, .-substring
Ignoring directive: .type	parseInt, @function
Ignoring directive: .size	parseInt, .-parseInt
Ignoring directive: .type	ord, @function
Ignoring directive: .size	ord, .-ord
Ignoring directive: .type	string_add, @function
Ignoring directive: .size	string_add, .-string_add
Ignoring directive: .type	string_equal, @function
Ignoring directive: .size	string_equal, .-string_equal
Ignoring directive: .type	string_notEqual, @function
Ignoring directive: .size	string_notEqual, .-string_notEqual
Ignoring directive: .type	string_less, @function
Ignoring directive: .size	string_less, .-string_less
Ignoring directive: .type	string_lessEqual, @function
Ignoring directive: .size	string_lessEqual, .-string_lessEqual
Ignoring directive: .type	string_greater, @function
Ignoring directive: .size	string_greater, .-string_greater
Ignoring directive: .type	string_greaterEqual, @function
Ignoring directive: .size	string_greaterEqual, .-string_greaterEqual
Ignoring directive: .ident	"GCC: (GNU) 11.1.0"

Build finished in 22 ms
auipc t1, 0
		# t1: 0 -> 0
jalr ra, 3212(t1)
		# ra: 0 -> 8
addi sp, sp, -176
		# sp: 536870912 -> 536870736
sw ra, 172(sp)
		# stored value = 8
sw s0, 168(sp)
		# stored value = 0
addi s0, sp, 176
		# s0: 0 -> 536870912
auipc t1, 4294967295
		# t1: 0 -> 4294966428
jalr ra, 2500(t1)
		# ra: 8 -> 3236
addi sp, sp, -64
		# sp: 536870736 -> 536870672
sw ra, 60(sp)
		# stored value = 3236
sw s0, 56(sp)
		# stored value = 536870912
addi s0, sp, 64
		# s0: 536870912 -> 536870736
lui t0, 2
		# t0: 0 -> 8192
ori t0, t0, 1908
		# t0: 8192 -> 10100
sw t0, -12(s0)
		# stored value = 10100
addi t0, zero, 4
		# t0: 10100 -> 4
sw t0, -16(s0)
		# stored value = 4
lw t0, -12(s0)
		# t0: 4 -> 10100
lw t1, -16(s0)
		# t1: 4294966428 -> 4
mul t2, t0, t1
		# t2: 0 -> 40400
sw t2, -20(s0)
		# stored value = 40400
addi t0, zero, 4
		# t0: 10100 -> 4
sw t0, -24(s0)
		# stored value = 4
lw t0, -20(s0)
		# t0: 4 -> 40400
lw t1, -24(s0)
		# t1: 4 -> 4
add t2, t0, t1
		# t2: 40400 -> 40404
sw t2, -28(s0)
		# stored value = 40404
lw t0, -28(s0)
		# t0: 40400 -> 40404
addi a0, t0, 0
		# a0: 0 -> 40404
auipc t1, 4294967295
		# t1: 4 -> 4294964916
jalr ra, 2404(t1)
		# ra: 3236 -> 1724
call libc-24
		# return value = 4016
addi t1, a0, 0
		# t1: 2280 -> 4016
sw t1, -32(s0)
		# stored value = 4016
lui t0, 2
		# t0: 45064 -> 8192
ori t0, t0, 1908
		# t0: 8192 -> 10100
sw t0, -36(s0)
		# stored value = 10100
lw t0, -36(s0)
		# t0: 10100 -> 10100
lw t1, -32(s0)
		# t1: 4016 -> 4016
sw t0, 0(t1)
		# stored value = 10100
addi t0, zero, 1
		# t0: 10100 -> 1
sw t0, -40(s0)
		# stored value = 1
addi t0, zero, 4
		# t0: 1 -> 4
sw t0, -44(s0)
		# stored value = 4
lw t0, -40(s0)
		# t0: 4 -> 1
lw t1, -44(s0)
		# t1: 4016 -> 4
mul t2, t0, t1
		# t2: 45064 -> 4
sw t2, -48(s0)
		# stored value = 4
lw t0, -32(s0)
		# t0: 1 -> 4016
lw t1, -48(s0)
		# t1: 4 -> 4
add t2, t0, t1
		# t2: 4 -> 4020
sw t2, -52(s0)
		# stored value = 4020
lw t0, -52(s0)
		# t0: 4016 -> 4020
lw t1, -56(s0)
		# t1: 4 -> 0
auipc t1, 0
		# t1: 0 -> 1812
sw t0, 2188(t1)
		# stored value = 4020
jal zero, 2  # .__init_return
		# zero: 0 -> 1824
lw ra, 60(sp)
		# ra: 6384 -> 3236
lw s0, 56(sp)
		# s0: 536870736 -> 536870912
addi sp, sp, 64
		# sp: 536870672 -> 536870736
jalr zero, 0(ra)
		# zero: 0 -> 1840
addi t0, zero, 0
		# t0: 4020 -> 0
sw t0, -12(s0)
		# stored value = 0
lw t0, -12(s0)
		# t0: 0 -> 0
lw t1, -16(s0)
		# t1: 1812 -> 0
sw t0, 0(t1)

Some error occurred.
Printing the register state...
zero =           0,	  ra =        3236,	  sp =   536870736,	  gp =           0,	  tp =           0,	  t0 =           0,	  t1 =           0,	  t2 =        4020,	
  s0 =   536870912,	  s1 =           0,	  a0 =        4016,	  a1 =        4660,	  a2 =        4660,	  a3 =        4660,	  a4 =        4660,	  a5 =        4660,	
  a6 =        4660,	  a7 =        4660,	  s2 =           0,	  s3 =           0,	  s4 =           0,	  s5 =           0,	  s6 =           0,	  s7 =           0,	
  s8 =           0,	  s9 =           0,	 s10 =           0,	 s11 =           0,	  t3 =        4660,	  t4 =        4660,	  t5 =        4660,	  t6 =        4660,	

Printing the call stack...
	...
	addi s0, sp, 176
	auipc t1, 4294967295
	jalr ra, 2500(t1)
	addi t0, zero, 0
	sw t0, -12(s0)
	lw t0, -12(s0)
	lw t1, -16(s0)
	sw t0, 0(t1)
from ...
	...
	auipc t1, 0
	jalr ra, 3212(t1)

libc++abi: terminating with uncaught exception of type ravel::InvalidAddress: 0
